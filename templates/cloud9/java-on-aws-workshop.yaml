# src: https://developers.eksworkshop.com/docs/java/introduction/workshop-setup

Description: Cloud9 for Java on AWS Workshop

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: java-on-aws-workshop

  C9InstanceType:
    Description: Cloud9 instance type
    Type: String
    Default: t3.large
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    ConstraintDescription: Must be a valid Cloud9 instance type

Resources:
  ################## VPC #################
  VPC:
    Type: AWS::EC2::VPC
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W60
    #         reason: "No need for Flow logs in this workshop"
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 192.168.0.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  C9SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W5
    #         reason: "Outbound access to the world is needed to download dependencies in C9"
    Properties:
      GroupName: cloud9-ingress-8080
      GroupDescription: Security group with ingress 8080 rule
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          Description: 8080 Inbound traffic

  ################## PERMISSIONS AND ROLES #################
  C9RoleAdmin:
    Type: AWS::IAM::Role
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W43
    #         reason: "C9 Instance will be used to deploy Infrastructure in the workshop"
    #       - id: W28
    #         reason: "Needed in order to check the proper role is attached for the workshop setup"
    Properties:
      RoleName: java-on-aws-workshop-admin
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/AWSCloud9Administrator
      Path: /

  C9RoleUser:
    Type: AWS::IAM::Role
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W43
    #         reason: "C9 Instance will be used to deploy Infrastructure in the workshop"
    #       - id: W28
    #         reason: "Needed in order to check the proper role is attached for the workshop participant"
    Properties:
      RoleName: java-on-aws-workshop-user
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        # - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Path: /

  C9LambdaExecutionRole:
    Type: AWS::IAM::Role
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W11
    #         reason: "Describe Action doesn't support any resource condition"
    #       - id: F3
    #         reason: "Bootstrap Lambda needs to inspect and operate Ec2 (and Cloud9) instances"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Join
            - ''
            - - C9LambdaPolicy-
              - !Ref AWS::Region
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*
              - Effect: Allow
                Action:
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - ec2:RebootInstances
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeIamInstanceProfileAssociations
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloud9:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:ListInstanceProfiles
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt C9RoleAdmin.Arn

  ################## LAMBDA BOOTSTRAP FUNCTION ################
  C9BootstrapInstanceLambda:
    Type: Custom::C9BootstrapInstanceLambda
    DependsOn:
      - C9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      ServiceToken: !GetAtt C9BootstrapInstanceLambdaFunction.Arn
      REGION: !Ref AWS::Region
      StackName: !Ref AWS::StackName
      EnvironmentId: !Ref C9Instance
      LabIdeInstanceProfileName: !Ref C9InstanceProfileAdmin
      LabIdeInstanceProfileArn: !GetAtt C9InstanceProfileAdmin.Arn

  C9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      # Metadata:
      #   cfn_nag:
      #     rules_to_suppress:
      #       - id: "W92"
      #         reason: "No need for running setup Lambda within a VPC"
      #       - id: "W89"
      #         reason: "No need for reserved concurrency for single setup lambda"
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      Handler: index.lambda_handler
      Role: !GetAtt C9LambdaExecutionRole.Arn
      Runtime: python3.9
      MemorySize: 256
      Timeout: 600
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          import logging
          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)
          def lambda_handler(event, context):
              logger.info('event: {}'.format(event))
              logger.info('context: {}'.format(context))
              responseData = {}
              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')
                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-java-on-aws-workshop'+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      logger.info('instance: {}'.format(instance))
                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      logger.info('iam_instance_profile: {}'.format(iam_instance_profile))
                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          logger.info('instance_state: {}'.format(instance_state))
                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      #r_ec2 = boto3.resource('ec2')
                      response = ec2.reboot_instances(InstanceIds=[instance['InstanceId']], DryRun=False)
                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')
                  except Exception as e:
                      logger.error(e, exc_info=True)
                      # responseData = {'Error': traceback.format_exc(e)}
                      responseData = {'Error':'There was a problem associating IAM profile to the Cloud9 Instance'}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')
              else:
                responseData = {'Success': 'Update or delete event'}
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')

  ################## SSM BOOTSRAP HANDLER ###############
  C9OutputBucket:
    Type: AWS::S3::Bucket
    # Metadata:
    #   cfn_nag:
    #     rules_to_suppress:
    #       - id: W35
    #         reason: "Access Logs aren't needed for this bucket"
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  C9OutputBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref C9OutputBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref C9OutputBucket
                - /*
            Principal:
              AWS: !GetAtt C9LambdaExecutionRole.Arn
  C9SSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName}
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        parameters:
          WaitHandleUrl:
            type: String
            description: (Required) URL of the CloudFormation WaitHandle
            default: !Ref WaitHandle
        mainSteps:
          - action: aws:runShellScript
            name: C9bootstrap
            inputs:
              runCommand:
                - '#!/bin/bash'
                - date
                - echo LANG=en_US.utf-8 >> /etc/environment
                - echo LC_ALL=en_US.UTF-8 >> /etc/environment
                - . /home/ec2-user/.bashrc
                - declare -i EXIT_CODE=0
                - echo '=== Clone Git repository ==='
                - sudo -H -u ec2-user bash -c "git clone
                  https://github.com/aws-samples/java-on-aws.git
                  /home/ec2-user/environment/java-on-aws/"
                - EXIT_CODE+=$?
                - echo '=== Setup IDE ==='
                - sudo -H -i -u ec2-user bash -c
                  "/home/ec2-user/environment/java-on-aws/labs/unicorn-store/infrastructure/scripts/setup-ide.sh
                  &>> /home/ec2-user/setup-ide.log"
                - EXIT_CODE+=$?
                - echo '=== Resize disk ==='
                - sudo -H -i -u ec2-user bash -c
                  "~/environment/java-on-aws/labs/unicorn-store/infrastructure/scripts/resize-disk.sh
                  50 &>> /home/ec2-user/resize-disk.log"
                - EXIT_CODE+=$?
                - echo '=== Setup Infrastructure components ==='
                - sudo -H -i -u ec2-user bash -c
                  "/home/ec2-user/environment/java-on-aws/labs/unicorn-store/infrastructure/scripts/setup-infrastructure.sh
                  &>> /home/ec2-user/setup-infra.log"
                - EXIT_CODE+=$?
                - echo '=== Install cfn-signal and report status ==='
                - cd /home/ec2-user/
                - wget
                  https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.zip
                  > /dev/null 2>&1
                - unzip aws-cfn-bootstrap-py3-latest.zip > /dev/null 2>&1
                - cd aws-cfn-bootstrap-2.0/
                - python3 setup.py install &>>
                  /home/ec2-user/setup-aws-cfn-bootstrap.log
                - EXIT_CODE+=$?
                - if [ $EXIT_CODE -ne 0 ]; then export BOOTSTRAP_RESULT=false;
                  else export BOOTSTRAP_RESULT=true; fi
                - '/opt/aws/bin/cfn-signal -e $EXIT_CODE -s $BOOTSTRAP_RESULT
                  ''{{ WaitHandleUrl }}'' '
                - echo "Bootstrap completed with return code $EXIT_CODE"
                - shutdown -r -t 60

  C9BootstrapAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref C9SSMDocument
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref C9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrap
          Values:
            - Active

  ################## INSTANCE #####################
  C9InstanceProfileAdmin:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      InstanceProfileName: java-on-aws-workshop-admin
      Roles:
        - !Ref C9RoleAdmin

  C9InstanceProfileUser:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      InstanceProfileName: java-on-aws-workshop-user
      Roles:
        - !Ref C9RoleUser

  C9Instance:
    DependsOn: C9BootstrapAssociation
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: !Sub AWS Cloud9 instance for ${EnvironmentName}
      SubnetId: !Ref PublicSubnet1
      ImageId: amazonlinux-2023-x86_64
      #ConnectionType: CONNECT_SSM

      AutomaticStopTimeMinutes: 3600
      InstanceType: !Ref C9InstanceType
      Name: java-on-aws-workshop
      # OwnerArn: !Join
      #   - ''
      #   - - 'arn:aws:iam::'
      #     - !Ref "AWS::AccountId"
      #     - ':assumed-role/WSParticipantRole/Participant'
      Tags:
        - Key: SSMBootstrap
          Value: Active
        - Key: Environment
          Value: !Sub ${EnvironmentName}

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: C9Instance
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '3600'
      Count: 1

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join
      - ','
      - - !Ref PublicSubnet1

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  C9SecurityGroup:
    Description: Security group with ingress 8080 rule
    Value: !Ref C9SecurityGroup

  Cloud9IDE:
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - .console.aws.amazon.com/cloud9/ide/
        - !Ref C9Instance
        - '?region='
        - !Ref AWS::Region