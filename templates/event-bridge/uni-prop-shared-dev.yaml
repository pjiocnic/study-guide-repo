# src: https://catalog.workshops.aws/serverless-developer-experience/en-US/appendix/hosting/self-hosting

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Base infrastructure that will set up the central event bus and S3 image upload bucket.

######################################
# METADATA
######################################
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - ES6000
        - WS1004

######################################
# PARAMETERS
######################################
Parameters:
  Stage:
    Type: String
    Default: Local
    AllowedValues:
      - Local
      - Dev
      - Prod

  ContractsServiceNamespace:
    Type: String
    Default: "unicorn.contracts"
    AllowedValues:
      - "unicorn.contracts"

  PropertiesServiceNamespace:
    Type: String
    Default: "unicorn.properties"
    AllowedValues:
      - "unicorn.properties"

  WebServiceNamespace:
    Type: String
    Default: "unicorn.web"
    AllowedValues:
      - "unicorn.web"

######################################
# MAPPINGS - Should be removed when values change to lower case
######################################
Mappings:
  Stage:
    Dev:
      Value: dev
    Prod:
      Value: prod
    Local:
      Value: local

######################################
# GLOBALS
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
######################################
Globals:
  Function:
    Timeout: 15
    Runtime: python3.9
    MemorySize: 128
    Tracing: Active
    Architectures:
      - arm64
    Tags:
      stage: !Ref Stage
      project: AWS Serverless Developer Experience
      service: Unicorn Base Infrastructure

######################################
# RESOURCES
######################################
Resources:
  ######################################
  # EVENTBRIDGE BUS
  ######################################
  UnicornPropertiesEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub UnicornPropertiesEventBus-${Stage}

  PropertiesServiceCatchAllLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/events/${Stage}/${PropertiesServiceNamespace}-catchall
      RetentionInDays: 3

  PropertiesServiceCatchAllRule:
    Type: AWS::Events::Rule
    Properties:
      Name: properties.catchall # Arbitrary name of the Rule
      Description: Catch all events rule for the properties service. This includes events from Contracts and Properties Web
      # This means the rule will be associated with the AWS EventBridge event bus named "UnicornPropertiesEventBus."
      EventBusName: !Ref UnicornPropertiesEventBus
      # event pattern that specifies which events should trigger this rule
      EventPattern:
        # Indicates event pattern is filtering events based on the AWS account responsible for generating the event
        account:
          - !Ref AWS::AccountId
        # indicates that the event pattern is ALSO filtering events based on their source
        source:
          - !Ref ContractsServiceNamespace # unicorn.contracts
          - !Ref WebServiceNamespace       # unicorn.web
      State: ENABLED  # rule is active
      # This block defines the targets to which events matching the rule will be sent for processing.
      Targets:
        - Arn: !GetAtt PropertiesServiceCatchAllLogGroup.Arn # events matching the rule will be sent to this CloudWatch Logs log group for further processing or logging
          Id: !Sub PropertiesServiceCatchAllLogGroupTarget-${Stage} # sets an identifier for this target

  PropertiesWebCatchAllLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/events/${Stage}/${WebServiceNamespace}-catchall
      RetentionInDays: 3

  # Rule for UnicornPropertiesEventBus, to filter for unicorn.properties and send to PropertiesWebCatchAllLogGroup log group
  PropertiesWebCatchAllRule:
    Type: AWS::Events::Rule
    Properties:
      Name: web.catchall
      Description: Catch all events rule for properties web. This includes events from the Properties Service
      EventBusName: !Ref UnicornPropertiesEventBus # Rule Attached to this bus
      # Filter for source of events
      EventPattern:
        account:
          - !Ref AWS::AccountId
        source:
          - !Ref PropertiesServiceNamespace # unicorn.properties
      State: ENABLED
      # Target for sending the events matching the EventPattern
      Targets:
        - Arn: !GetAtt PropertiesWebCatchAllLogGroup.Arn # events matching the rule will be sent to this CloudWatch Logs log group for further processing or logging
          Id: !Sub PropertiesWebCatchAllLogGroupTarget-${Stage}

  # this CloudFormation resource defines a policy that allows AWS CloudWatch Logs and
  # AWS EventBridge to perform specific actions on log streams within the specified log
  # groups (PropertiesServiceCatchAllLogGroup and PropertiesWebCatchAllLogGroup) based
  # on the Stage variable. This policy is attached to the respective log groups
  # to grant the necessary permissions.
  EventBridgeCloudWatchLogGroupPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: !Sub EventBridgeToCWLogsPolicy-${Stage} # sets the name of the resource policy
      # Note: PolicyDocument has to be established this way. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html#cfn-logs-resourcepolicy-policydocument
      PolicyDocument: !Sub
        - | # Multi-line string
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "delivery.logs.amazonaws.com",
                    "events.amazonaws.com"
                  ]
                },
                "Action": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": [
                  "${propertiesServiceLogGroup}",
                  "${propertiesWebServiceLogGroup}"
                ]
              }
            ]
          }
        # These statements are used to specify the resources to which the policy applies
        - propertiesServiceLogGroup: !GetAtt PropertiesServiceCatchAllLogGroup.Arn
          propertiesWebServiceLogGroup: !GetAtt PropertiesWebCatchAllLogGroup.Arn

#  this policy allows the root user of the AWS account to put events into the
# "UnicornPropertiesEventBus" event bus using the events:PutEvents action. However,
# it imposes a condition that restricts this permission to only accept events from
# specific sources: "unicorn.contracts," "unicorn.properties," and "unicorn.web."
# This way, it limits the ability to publish events to the event bus to only
# those services and namespaces specified in the condition.
  ContractEventsBusPublishPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref UnicornPropertiesEventBus # Applied to this bus
      StatementId: !Sub ContactsPublishEventsPolicy-${Stage}
      Statement:
        Effect: Allow
        Principal:
          AWS:
            - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root" # Gives broad permissions to the entire AWS account
        Action: events:PutEvents # Allow put events into the event bus
        Resource: !GetAtt UnicornPropertiesEventBus.Arn # permission applies to this specific event bus
        Condition: # But following condition limits to certain sources only
          StringEquals:
            events:source:
              - !Ref ContractsServiceNamespace  # unicorn.contracts
              - !Ref PropertiesServiceNamespace # unicorn.properties
              - !Ref WebServiceNamespace        # unicorn.web

# this resource defines an Event Bus Policy (PropertiesServiceRulePolicy) that allows specific AWS EventBridge
# actions on rules within an Event Bus (UnicornPropertiesEventBus). The policy applies to the root user of the
# AWS account, and its conditions ensure that it only takes effect under certain circumstances specified
# in the conditions section.
  PropertiesServiceRulePolicy:
    Type: "AWS::Events::EventBusPolicy"
    Properties:
      EventBusName: !Ref UnicornPropertiesEventBus
      StatementId: !Sub CreateRulePolicy-${Stage}
      Statement:
        Effect: Allow
        Principal:
          AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
        # Actions for managing AWS EventBridge rules.
        Action:
          - "events:PutRule"
          - "events:DeleteRule"
          - "events:DescribeRule"
          - "events:DisableRule"
          - "events:EnableRule"
          - "events:PutTargets"
          - "events:RemoveTargets"
        # Action applies to all EventBridge rules under the UnicornPropertiesEventBus Event Bus in the
        # given AWS region and AWS account
        Resource:
          - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${UnicornPropertiesEventBus.Name}/*"
        # Conditions limit under which actions can take place
        # events:creatorAccount should be equal to aws:PrincipalAccount
        # events:source should be equal to either ContractsServiceNamespace AND PropertiesServiceNamespace
        # events:source should not be false
        Condition:
          StringEqualsIfExists:
            "events:creatorAccount": "${aws:PrincipalAccount}"
          StringEquals:
            "events:source":
              - !Ref ContractsServiceNamespace
              - !Ref PropertiesServiceNamespace
          "Null": # checks if the "events:source" attribute is not explicitly set to "false."
            "events:source": "false"

  ######################################
  # S3 PROPERTY IMAGES BUCKET
  ######################################
  UnicornPropertiesImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - uni-prop-${st}-images-${AWS::AccountId}
        - st: !FindInMap [Stage, !Ref Stage, Value]

  ######################################
  # SSM PARAMETERS
  ######################################
  UnicornPropertiesEventBusNameParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/EventBusName
      Value: !Ref UnicornPropertiesEventBus

  UnicornPropertiesImagesBucketParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/ImagesBucket
      Value: !Ref UnicornPropertiesImagesBucket

  ContractsServiceSourceNameParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/UnicornContractsNamespace
      Value: !Ref ContractsServiceNamespace

  PropertiesServiceSourceNameParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/UnicornPropertiesNamespace
      Value: !Ref PropertiesServiceNamespace

  PropertiesWebServiceSourceNameParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /UniProp/${Stage}/UnicornWebNamespace
      Value: !Ref WebServiceNamespace

  ######################################
  # IMAGE UPLOAD CUSTOM RESOURCE FUNCTION
  ######################################
  ImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.9
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref UnicornPropertiesImagesBucket
        - Statement:
          - Sid: S3DeleteBucketPolicy
            Effect: Allow
            Action:
            - s3:DeleteBucket
            Resource: !GetAtt UnicornPropertiesImagesBucket.Arn
      InlineCode: |
        import os
        import zipfile
        from urllib.request import urlopen
        import boto3
        import cfnresponse

        zip_file_name = 'property_images.zip'
        url = f"https://aws-serverless-developer-experience-workshop-assets.s3.amazonaws.com/property_images/{zip_file_name}"
        temp_zip_download_location = f"/tmp/{zip_file_name}"

        s3 = boto3.resource('s3')

        def create(event, context):
          image_bucket_name = event['ResourceProperties']['DestinationBucket']
          bucket = s3.Bucket(image_bucket_name)
          print(f"downloading zip file from: {url} to: {temp_zip_download_location}")
          r = urlopen(url).read()
          with open(temp_zip_download_location, 'wb') as t:
            t.write(r)
            print('zip file downloaded')

          print(f"unzipping file: {temp_zip_download_location}")
          with zipfile.ZipFile(temp_zip_download_location,'r') as zip_ref:
            zip_ref.extractall('/tmp')

          print('file unzipped')

          # upload to s3
          for root,_,files in os.walk('/tmp/property_images'):
            for file in files:
              print(f"file: {os.path.join(root, file)}")
              print(f"s3 bucket: {image_bucket_name}")
              bucket.upload_file(os.path.join(root, file), file)

        def delete(event, context):
          image_bucket_name = event['ResourceProperties']['DestinationBucket']
          img_bucket = s3.Bucket(image_bucket_name)
          img_bucket.objects.delete()
          img_bucket.delete()

        def lambda_handler(event, context):
          try:
            if event['RequestType'] in ['Create', 'Update']:
              create(event, context)
            elif event['RequestType'] in ['Delete']:
              delete(event, context)
          except Exception as e:
            print(e)
          cfnresponse.send(event, context, cfnresponse.SUCCESS, dict())

  ImageUpload:
    Type: Custom::ImageUpload
    Properties:
      ServiceToken: !GetAtt ImageUploadFunction.Arn
      DestinationBucket: !Ref UnicornPropertiesImagesBucket

######################################
# OUTPUTS
######################################
Outputs:
  UnicornPropertiesEventBus:
    Value: !Ref UnicornPropertiesEventBus
  ImageUploadBucketName:
    Value: !Ref UnicornPropertiesImagesBucket
