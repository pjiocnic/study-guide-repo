AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates Route 53 Resolver query configuration for an existing VPC and lambda function to query CloudWatch Logs Insight"
Metadata:
  License: 
     Description: | 
        Usage is permitted under Apache 2.0 license
        https://github.com/awslabs/aws-cloudformation-templates/blob/master/LICENSE.txt
Parameters:
  VPCID:
    Description: The ID of an existing VPC
    Type: AWS::EC2::VPC::Id
  
#1. VPC
Resources:  
  # CloudWatch Logs group for Route 53 Query Logs
  Route53QueryLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7

  Route53QueryLoggingConfig:
    Type: "AWS::Route53Resolver::ResolverQueryLoggingConfig"
    Properties:
      DestinationArn: !GetAtt Route53QueryLogGroup.Arn

  Route53QueryLoggingConfigAssociation:
    Type: "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation"
    Properties:
      ResolverQueryLogConfigId: !GetAtt Route53QueryLoggingConfig.Id
      ResourceId: !Ref VPCID

  # Lambda function to query CloudWatch Logs Insight
  CWLogsQueryLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.10
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import time

          # Get VPC ID from environment variable
          vpc_id = os.environ["VPC_ID"]

          # Get available VPC endpoint services
          client = boto3.client("ec2")
          available_services = []
          try:
              response = client.describe_vpc_endpoint_services()
              available_services = response['ServiceNames']
          except Exception as e:
              print(e)
              print("ERROR: cannot get available VPC endpoint services")
              
          # Get implemented VPC endpoint services
          endpoints = []
          try:
              response = client.describe_vpc_endpoints()
              endpoints = response['VpcEndpoints']
          except Exception as e:
              print(e)
              print("ERROR: Cannot get VPC endpoints")

          # function to check if vpc endpoint exists for given service name
          def check_vpc_endpoint_exists(service_name):
              print("INFO: checking " + vpc_id + " and " + service_name)
              for endpoint in endpoints:
                  if endpoint["VpcId"] == vpc_id and endpoint["ServiceName"] == service_name:
                      return True
              
              return False
                      

          # Function to query CloudWatch Logs Insights for DNS resolutions
          def query_dns_answers(query_name, client, log_group_name, startTime, endTime):
              route53_answers = []

              query_string = 'fields @message | filter query_name == \''+ query_name + '\' | filter query_type == "A" | limit 1'

              response = client.start_query(
                  logGroupName=log_group_name,
                  queryString=query_string,
                  startTime=startTime,
                  endTime=endTime,
                  limit=5
              )
              query_id = response['queryId']
              print("INFO: Query started with ID " + query_id + ", Query string: " + query_string + ", Log group name: " + log_group_name)
              time.sleep(5)
              
              response = client.get_query_results(
                queryId=query_id
              )
              
              print(response)
              
              # If there is a result, then extract the DNS resolution data from it
              if len(response['results'][0]) > 0:
                  message = response['results'][0][0]['value']
                  
                  # Extract the Rdata from message
                  if "answers" in message:
                      message_dict = eval(message)
                      for a in message_dict["answers"]:
                          route53_answers.append(a["Rdata"])
              
              return route53_answers

          # Function to reverse a query name
          def reverse_query_name(query_name):
              parts = query_name.split('.')
              if parts[-1] == '':
                  parts.pop()
              parts.reverse()
              return '.'.join(parts)

          def lambda_handler(event, context):
              # Get environment variables
              log_group_name = os.environ.get('ROUTE53_LOG_GROUP_NAME')
              #query_string = os.environ.get('ROUTE53_QUERY_STRING')
              query_string = "fields @timestamp, query_name | filter query_name ~= 'amazonaws.com.' | stats count () as queryCount by query_name | sort queryCount desc | limit 20"

              route53_query_name_resolutions = {} # List to hold query names and resolution arrays
              start_time=int(time.time()) - 604800 # One week ago
              end_time=int(time.time()) # Current time

              # Create CloudWatch Logs Insights query
              client = boto3.client('logs')
              response = client.start_query(
                  logGroupName=log_group_name,
                  queryString=query_string,
                  startTime=start_time, # One week ago
                  endTime=end_time,
                  limit=20
              )
              query_id = response['queryId']
              print("INFO: Query started with ID " + query_id + ", Query string: " + query_string + ", Log group name: " + log_group_name)
              time.sleep(10)
              
              response = client.get_query_results(
                  queryId=query_id
              )

              print("INFO: Response " + str(response))

              # Loop through results and add to list
              for result in response["results"]:
                  query_name = result[0]['value']
                  query_count = result[1]['value']
                  reverse_name = reverse_query_name(query_name)
                  endpoint_supported = reverse_name in available_services
                  endpoint_exists = check_vpc_endpoint_exists(reverse_name)
                  
                  route53_query_name_resolutions[query_name] = { "queryCount" : query_count , "endpoint_supported": endpoint_supported, "endpoint_exists": endpoint_exists, "answers" : query_dns_answers(query_name, client, log_group_name, start_time, end_time) }
              
              print("INFO: Route53 answers: " + str(route53_query_name_resolutions))

              # return the full response dict
              return route53_query_name_resolutions    

      Environment:
        Variables:
          VPC_ID: !Ref VPCID
          ROUTE53_LOG_GROUP_NAME: !Ref Route53QueryLogGroup
          ROUTE53_QUERY_STRING: "fields @timestamp, query_name | filter query_name ~= 'amazonaws.com.' stats count () as queryCount by query_name sort queryCount desc limit 20"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: aws-lambda-basic-execution-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: queryLogs
                Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: query-log-groups
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: queryLogs
                Effect: Allow
                Action: 
                  - 'logs:StartQuery'
                  - 'logs:GetQueryResults'
                Resource:
                  - !GetAtt Route53QueryLogGroup.Arn
        - PolicyName: describe-vpc-endpoints
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: describeVPCEndpoints
                Effect: Allow
                Action: 
                  - 'ec2:DescribeVpcEndpoints'
                  - 'ec2:DescribeVpcEndpointServices'
                Resource: '*'

Outputs:

  VPCId:
    Description: "VPCId of VPC"
    Value: !Ref VPCID
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-VPCId"