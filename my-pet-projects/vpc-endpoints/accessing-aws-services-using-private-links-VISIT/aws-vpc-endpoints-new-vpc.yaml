AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a VPC with Managed NAT, 2 Public and 2 Private Subnets. Configures Route 53 Resolver query and lambda function to query CloudWatch Logs Insight"
Metadata:
  License: 
     Description: | 
        Usage is permitted under Apache 2.0 license
        https://github.com/awslabs/aws-cloudformation-templates/blob/master/LICENSE.txt
Parameters:
  VPCName:
    Description: The name of the VPC being created.
    Type: String
    Default: "VPC Public and Private subnets with with NAT Gateway"

  EgressCIDR:
    Description: IPv4 CIDR block for outbound internet access via the NAT Gateway and Internet Gateway
    Type: String
    Default: "0.0.0.0/0"

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public0:
      CIDR: "10.0.0.0/24"
    Public1:
      CIDR: "10.0.1.0/24"
    Private0:
      CIDR: "10.0.2.0/24"
    Private1:
      CIDR: "10.0.3.0/24"

  # This mapping accounts for the scenario when certain AZs
  # are not available to use (this differs on a per account
  # per customer basis). E.g., if the 'b' AZ is not available
  # in a specific region in one's account then updating the
  # list contained in the mapping below here will allow a
  # different AZ to be chosen.
  AZRegions:
    ap-northeast-1:
      AZs: ["a", "b"]
    ap-northeast-2:
      AZs: ["a", "b"]
    ap-south-1:
      AZs: ["a", "b"]
    ap-southeast-1:
      AZs: ["a", "b"]
    ap-southeast-2:
      AZs: ["a", "b"]
    ca-central-1:
      AZs: ["a", "b"]
    eu-central-1:
      AZs: ["a", "b"]
    eu-west-1:
      AZs: ["a", "b"]
    eu-west-2:
      AZs: ["a", "b"]
    sa-east-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]
    us-east-2:
      AZs: ["a", "b"]
    us-west-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b"]

#1. VPC
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Ref VPCName

  PublicSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public0"
          - "CIDR"
      MapPublicIpOnLaunch: "false"
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref VPCName
              - '-public-'
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public1"
          - "CIDR"
      MapPublicIpOnLaunch: "false"
      Tags:
        -
          Key: "Application"
          Value:
            !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref VPCName
              - '-public-'
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private0"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value:
            !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref VPCName
              - '-private-'
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private1"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref VPCName
              - '-private-'
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-IGW'


  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-route-table'


  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref EgressCIDR
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  ElasticIP0:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  ElasticIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGateway0:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP0"
          - "AllocationId"
      SubnetId: !Ref PublicSubnet0

  NATGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP1"
          - "AllocationId"
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable0:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-private-route-table-0'

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-private-route-table-1'

  PrivateRouteToInternet0:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable0
      DestinationCidrBlock: !Ref EgressCIDR
      NatGatewayId: !Ref NATGateway0

  PrivateRouteToInternet1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: !Ref EgressCIDR
      NatGatewayId: !Ref NATGateway1

  PrivateSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable0

  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  
  # CloudWatch Logs group for Route 53 Query Logs
  Route53QueryLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7

  Route53QueryLoggingConfig:
    Type: "AWS::Route53Resolver::ResolverQueryLoggingConfig"
    Properties:
      DestinationArn: !GetAtt Route53QueryLogGroup.Arn

  Route53QueryLoggingConfigAssociation:
    Type: "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation"
    Properties:
      ResolverQueryLogConfigId: !GetAtt Route53QueryLoggingConfig.Id
      ResourceId: !Ref VPC

  # Lambda function to query CloudWatch Logs Insight
  CWLogsQueryLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.10
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import time

          # Get VPC ID from environment variable
          vpc_id = os.environ["VPC_ID"]

          # Get available VPC endpoint services
          client = boto3.client("ec2")
          available_services = []
          try:
              response = client.describe_vpc_endpoint_services()
              available_services = response['ServiceNames']
          except Exception as e:
              print(e)
              print("ERROR: cannot get available VPC endpoint services")
              
          # Get implemented VPC endpoint services
          endpoints = []
          try:
              response = client.describe_vpc_endpoints()
              endpoints = response['VpcEndpoints']
          except Exception as e:
              print(e)
              print("ERROR: Cannot get VPC endpoints")

          # function to check if vpc endpoint exists for given service name
          def check_vpc_endpoint_exists(service_name):
              print("INFO: checking " + vpc_id + " and " + service_name)
              for endpoint in endpoints:
                  if endpoint["VpcId"] == vpc_id and endpoint["ServiceName"] == service_name:
                      return True
              
              return False
                      

          # Function to query CloudWatch Logs Insights for DNS resolutions
          def query_dns_answers(query_name, client, log_group_name, startTime, endTime):
              route53_answers = []

              query_string = 'fields @message | filter query_name == \''+ query_name + '\' | filter query_type == "A" | limit 1'

              response = client.start_query(
                  logGroupName=log_group_name,
                  queryString=query_string,
                  startTime=startTime,
                  endTime=endTime,
                  limit=5
              )
              query_id = response['queryId']
              print("INFO: Query started with ID " + query_id + ", Query string: " + query_string + ", Log group name: " + log_group_name)
              time.sleep(5)
              
              response = client.get_query_results(
                queryId=query_id
              )
              
              print(response)
              
              # If there is a result, then extract the DNS resolution data from it
              if len(response['results'][0]) > 0:
                  message = response['results'][0][0]['value']
                  
                  # Extract the Rdata from message
                  if "answers" in message:
                      message_dict = eval(message)
                      for a in message_dict["answers"]:
                          route53_answers.append(a["Rdata"])
              
              return route53_answers

          # Function to reverse a query name
          def reverse_query_name(query_name):
              parts = query_name.split('.')
              if parts[-1] == '':
                  parts.pop()
              parts.reverse()
              return '.'.join(parts)

          def lambda_handler(event, context):
              # Get environment variables
              log_group_name = os.environ.get('ROUTE53_LOG_GROUP_NAME')
              #query_string = os.environ.get('ROUTE53_QUERY_STRING')
              query_string = "fields @timestamp, query_name | filter query_name ~= 'amazonaws.com.' | stats count () as queryCount by query_name | sort queryCount desc | limit 20"

              route53_query_name_resolutions = {} # List to hold query names and resolution arrays
              start_time=int(time.time()) - 604800 # One week ago
              end_time=int(time.time()) # Current time

              # Create CloudWatch Logs Insights query
              client = boto3.client('logs')
              response = client.start_query(
                  logGroupName=log_group_name,
                  queryString=query_string,
                  startTime=start_time, # One week ago
                  endTime=end_time,
                  limit=20
              )
              query_id = response['queryId']
              print("INFO: Query started with ID " + query_id + ", Query string: " + query_string + ", Log group name: " + log_group_name)
              time.sleep(10)
              
              response = client.get_query_results(
                  queryId=query_id
              )

              print("INFO: Response " + str(response))

              # Loop through results and add to list
              for result in response["results"]:
                  query_name = result[0]['value']
                  query_count = result[1]['value']
                  reverse_name = reverse_query_name(query_name)
                  endpoint_supported = reverse_name in available_services
                  endpoint_exists = check_vpc_endpoint_exists(reverse_name)
                  
                  route53_query_name_resolutions[query_name] = { "queryCount" : query_count , "endpoint_supported": endpoint_supported, "endpoint_exists": endpoint_exists, "answers" : query_dns_answers(query_name, client, log_group_name, start_time, end_time) }
              
              print("INFO: Route53 answers: " + str(route53_query_name_resolutions))

              # return the full response dict
              return route53_query_name_resolutions    

      Environment:
        Variables:
          VPC_ID: !Ref VPC
          ROUTE53_LOG_GROUP_NAME: !Ref Route53QueryLogGroup
          ROUTE53_QUERY_STRING: "fields @timestamp, query_name | filter query_name ~= 'amazonaws.com.' stats count () as queryCount by query_name sort queryCount desc limit 20"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: aws-lambda-basic-execution-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: queryLogs
                Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: query-log-groups
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: queryLogs
                Effect: Allow
                Action: 
                  - 'logs:StartQuery'
                  - 'logs:GetQueryResults'
                Resource:
                  - !GetAtt Route53QueryLogGroup.Arn
        - PolicyName: describe-vpc-endpoints
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: describeVPCEndpoints
                Effect: Allow
                Action: 
                  - 'ec2:DescribeVpcEndpoints'
                  - 'ec2:DescribeVpcEndpointServices'
                Resource: '*'

Outputs:

  VPCId:
    Description: "VPCId of VPC"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-VPCId"

  PublicSubnet0:
    Description: "SubnetId of public subnet 0"
    Value: !Ref PublicSubnet0
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet0"

  PublicSubnet1:
    Description: "SubnetId of public subnet 1"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet1"

  PrivateSubnet0:
    Description: "SubnetId of private subnet 0"
    Value: !Ref PrivateSubnet0
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet0"

  PrivateSubnet1:
    Description: "SubnetId of private subnet 1"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet1"

  DefaultSecurityGroup:
    Description: "DefaultSecurityGroup Id"
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup"

  PrivateRouteTable1:
    Description: "PrivateRouteTable1 Id"
    Value: !GetAtt PrivateRouteTable1.RouteTableId

  PrivateRouteTable0:
    Description: "PrivateRouteTable0 Id"
    Value: !GetAtt PrivateRouteTable0.RouteTableId
  
  PublicRouteTable:
    Description: "PublicRouteTable Id"
    Value: !GetAtt PublicRouteTable.RouteTableId
