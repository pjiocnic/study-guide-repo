
# [Scaling an ASG using target tracking with a dynamic SQS target by Sheila Busser ](https://aws.amazon.com/blogs/compute/scaling-an-asg-using-target-tracking-with-a-dynamic-sqs-target/)
# src: my-pet-projects/ec2-scaling/sqs-ec2-spot-fleet-autoscaling/sqs-ec2-spot-fleet-autoscaling.yaml

---
AWSTemplateFormatVersion: 2010-09-09
Description: Example of EC2 Spot Fleet autoscaling based on SQS queue depth
Mappings:
  CidrMappings:
    public-subnet-1:
      CIDR: 10.0.1.0/24
    public-subnet-2:
      CIDR: 10.0.2.0/24
    vpc:
      CIDR: 10.0.0.0/16
  amazonLinuxAmi:
    ap-northeast-1:
      AMI: ami-06cd52961ce9f0d85
    ap-northeast-2:
      AMI: ami-0a10b2721688ce9d2
    ap-south-1:
      AMI: ami-0912f71e06545ad88
    ap-southeast-1:
      AMI: ami-08569b978cc4dfa10
    ap-southeast-2:
      AMI: ami-09b42976632b27e9b
    ca-central-1:
      AMI: ami-0b18956f
    eu-central-1:
      AMI: ami-0233214e13e500f77
    eu-west-1:
      AMI: ami-047bb4163c506cd98
    eu-west-2:
      AMI: ami-f976839e
    eu-west-3:
      AMI: ami-0ebc281c20e89ba4b
    sa-east-1:
      AMI: ami-07b14488da8ea02a0
    us-east-1:
      AMI: ami-0ff8a91507f77f867
    us-east-2:
      AMI: ami-0b59bfac6be064b78
    us-west-1:
      AMI: ami-0bdb828fd58c52235
    us-west-2:
      AMI: ami-a0cfeed8
Metadata:
  Author:
    Description: Chad Schmutzer <schmutze@amazon.com>
  License:
    Description: 'Copyright 2017 Amazon.com, Inc. and its affiliates. All Rights Reserved.

      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at

      http://aws.amazon.com/asl/

      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'
Outputs:
  awsRegionId:
    Description: The AWS Region ID your template was launched in
    Value:
      Ref: AWS::Region
  s3BucketId:
    Description: The S3 bucket ID
    Value:
      Ref: s3Bucket
  spotFleetId:
    Description: The Spot Fleet request ID
    Value:
      Ref: spotFleet
  sqsQueueArn:
    Description: The SQS queue ARN
    Value:
      Fn::GetAtt:
      - sqsQueue
      - Arn
Parameters:
  keyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 Instances
    Type: AWS::EC2::KeyPair::KeyName
  sourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for instance ssh access and encoder source - defaults
      to 0.0.0.0/0
    Type: String
  spotFleetMaximumCapacity:
    Default: 6
    Description: Maximum number of EC2 Spot Instances to scale the Spot Fleet
    Type: Number
  spotFleetTargetCapacity:
    Default: 1
    Description: Number of EC2 Spot Instances to initially launch in the Spot Fleet
    Type: Number
Resources:
  attachGateway:
    DependsOn:
    - vpc
    - internetGateway
    Properties:
      InternetGatewayId:
        Ref: internetGateway
      VpcId:
        Ref: vpc
    Type: AWS::EC2::VPCGatewayAttachment
  cloudWatchLogsGroup:
    Properties:
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup
  internetGateway:
    DependsOn:
    - vpc
    Type: AWS::EC2::InternetGateway
  publicRoute:
    DependsOn:
    - publicRouteTable
    - internetGateway
    - attachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: internetGateway
      RouteTableId:
        Ref: publicRouteTable
    Type: AWS::EC2::Route
  publicRouteTable:
    DependsOn:
    - vpc
    - attachGateway
    Properties:
      Tags:
      - Key: Name
        Value: Public Route Table
      VpcId:
        Ref: vpc
    Type: AWS::EC2::RouteTable
  publicSubnet1:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-1
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 1
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet1RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet1
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  publicSubnet2:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-2
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 2
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet2RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet2
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  s3Bucket:
    DependsOn:
    - sqsQueue
    - sqsQueuePolicy
    Properties:
      NotificationConfiguration:
        QueueConfigurations:
        - Event: s3:ObjectCreated:*
          Queue:
            Fn::GetAtt:
            - sqsQueue
            - Arn
    Type: AWS::S3::Bucket
  spotFleet:
    DependsOn:
    - spotFleetRole
    - spotFleetInstanceProfile
    - spotFleetInstanceSecurityGroup
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        IamFleetRole:
          Fn::GetAtt:
          - spotFleetRole
          - Arn
        LaunchSpecifications:
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - amazonLinuxAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: c4.large
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: spotFleetInstanceSecurityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                yum -y install git

                cd /root && git clone https://github.com/awslabs/ec2-spot-labs.git

                REGION=${AWS::Region} S3BUCKET=${s3Bucket} SQSQUEUE=${sqsQueue} CLOUDWATCHLOGSGROUP=${cloudWatchLogsGroup}
                WAITCONDITIONHANDLE="${spotFleetWaitConditionHandle}" bash /root/ec2-spot-labs/sqs-ec2-spot-fleet-autoscaling/user-data.sh

                '
        ReplaceUnhealthyInstances: true
        TargetCapacity:
          Ref: spotFleetTargetCapacity
        TerminateInstancesWithExpiration: true
    Type: AWS::EC2::SpotFleet
  spotFleetAutoscaleRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetAutoscaleRole
      Path: /
    Type: AWS::IAM::Role
  spotFleetInstanceProfile:
    DependsOn:
    - spotFleetInstanceRole
    Properties:
      Path: /
      Roles:
      - Ref: spotFleetInstanceRole
    Type: AWS::IAM::InstanceProfile
  spotFleetInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: sqs:*
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - sqsQueue
              - Arn
          Version: 2012-10-17
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - sqsQueuePolicy
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: 2012-10-17
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - cloudWatchLogsPolicy
      - PolicyDocument:
          Statement:
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: s3Bucket
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - s3BucketListPolicy
      - PolicyDocument:
          Statement:
          - Action:
            - s3:PutObject*
            - s3:GetObject
            - s3:DeleteObject
            Effect: Allow
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: s3Bucket
                - /*
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - s3BucketReadWritePolicy
    Type: AWS::IAM::Role
  spotFleetInstanceSecurityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Spot Fleet Instance security group
      SecurityGroupIngress:
      - CidrIp:
          Ref: sourceCidr
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup
  spotFleetRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /
    Type: AWS::IAM::Role
  spotFleetScalableTarget:
    DependsOn:
    - spotFleet
    - spotFleetAutoscaleRole
    Properties:
      MaxCapacity:
        Ref: spotFleetMaximumCapacity
      MinCapacity:
        Ref: spotFleetTargetCapacity
      ResourceId:
        Fn::Join:
        - /
        - - spot-fleet-request
          - Ref: spotFleet
      RoleARN:
        Fn::GetAtt:
        - spotFleetAutoscaleRole
        - Arn
      ScalableDimension: ec2:spot-fleet-request:TargetCapacity
      ServiceNamespace: ec2
    Type: AWS::ApplicationAutoScaling::ScalableTarget
  spotFleetScalingPolicyScaleDown:
    Properties:
      PolicyName: spotFleetScalingPolicyScaleDown
      PolicyType: StepScaling
      ScalingTargetId:
        Ref: spotFleetScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 300
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  spotFleetScalingPolicyScaleUp:
    Properties:
      PolicyName: spotFleetScalingPolicyScaleUp
      PolicyType: StepScaling
      ScalingTargetId:
        Ref: spotFleetScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 300
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
  spotFleetWaitCondition:
    DependsOn: spotFleetWaitConditionHandle
    Properties:
      Count:
        Ref: spotFleetTargetCapacity
      Handle:
        Ref: spotFleetWaitConditionHandle
      Timeout: 900
    Type: AWS::CloudFormation::WaitCondition
  spotFleetWaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  sqsQueue:
    Properties:
      VisibilityTimeout: 900
    Type: AWS::SQS::Queue
  sqsQueueDepthAlarmScaleDown:
    DependsOn:
    - sqsQueue
    - spotFleetScalingPolicyScaleDown
    Properties:
      AlarmActions:
      - Ref: spotFleetScalingPolicyScaleDown
      AlarmDescription: Alarm if queue depth falls below 8 messages
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: QueueName
        Value:
          Fn::GetAtt:
          - sqsQueue
          - QueueName
      EvaluationPeriods: 2
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      Threshold: 8
    Type: AWS::CloudWatch::Alarm
  sqsQueueDepthAlarmScaleUp:
    DependsOn:
    - sqsQueue
    - spotFleetScalingPolicyScaleUp
    Properties:
      AlarmActions:
      - Ref: spotFleetScalingPolicyScaleUp
      AlarmDescription: Alarm if queue depth grows beyond 16 messages
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: QueueName
        Value:
          Fn::GetAtt:
          - sqsQueue
          - QueueName
      EvaluationPeriods: 2
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Sum
      Threshold: 16
    Type: AWS::CloudWatch::Alarm
  sqsQueuePolicy:
    DependsOn:
    - sqsQueue
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - sqs:SendMessage
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Resource: '*'
        Version: 2012-10-17
      Queues:
      - Ref: sqsQueue
    Type: AWS::SQS::QueuePolicy
  vpc:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - vpc
        - CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: VPC for example of EC2 Spot Fleet autoscaling based on SQS queue depth
    Type: AWS::EC2::VPC
...
