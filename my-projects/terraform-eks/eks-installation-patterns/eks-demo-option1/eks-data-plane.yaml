AWSTemplateFormatVersion: '2010-09-09'

Description: Stack for creating worker nodes for an existing EKS cluster.

Parameters:
  ProvidedSecurityGroup:
    Type: String
    Description: Inbound SSH, Outbout ALL
    Default: 'sg-0d640ec8e209ef5a7'
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t3.small
    ConstraintDescription: Must be a valid EC2 instance type
  AmiType:
    Type: String
    Description: The AMI type for the Node Group
    Default: AL2_x86_64
  NodeGroupName:
    Type: String
    Description: Unique identifier for the Node Group.
  NodeGroupScalingConfigMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG
    Default: 3
  NodeGroupScalingConfigMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeGroupScalingConfigDesiredSize
    Default: 10
  NodeGroupScalingConfigDesiredSize:
    Type: Number
    Description: Desired capacity of Node Group ASG
    Default: 3
  NodeDiskSize:
    Type: Number
    Description: Node EBS volume size
    Default: 300
  ClusterName:
    Description: The cluster name provided when the cluster was created. If it is
      incorrect, nodes will not be able to join the cluster
    Type: String
  ClusterControlPlaneSecurityGroup:
    Description: The security group of the cluster control plane
    Type: AWS::EC2::SecurityGroup::Id
  VpcId:
    Description: The VPC of the worker instances
    Type: AWS::EC2::VPC::Id
  Subnets:
    Description: The subnets where workers should be created. Recommended to pick
      only private subnets.
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AdministratorAccess
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'NodeInstanceRole'
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
          Value: owned
  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref 'NodeSecurityGroup'
      SourceSecurityGroupId: !Ref 'NodeSecurityGroup'
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  NodeSecurityGroupKubernetesService:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow all traffic for K8s service ports. Workaround for NLB bug
      GroupId: !Ref 'NodeSecurityGroup'
      CidrIp: '0.0.0.0/0'
      IpProtocol: tcp
      FromPort: 30000
      ToPort: 32767
  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the
        cluster control plane
      GroupId: !Ref 'NodeSecurityGroup'
      SourceSecurityGroupId: !Ref 'ClusterControlPlaneSecurityGroup'
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet
        and pods
      GroupId: !Ref 'ClusterControlPlaneSecurityGroup'
      DestinationSecurityGroupId: !Ref 'NodeSecurityGroup'
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive
        communication from cluster control plane
      GroupId: !Ref 'NodeSecurityGroup'
      SourceSecurityGroupId: !Ref 'ClusterControlPlaneSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running
        extension API servers on port 443
      GroupId: !Ref 'ClusterControlPlaneSecurityGroup'
      DestinationSecurityGroupId: !Ref 'NodeSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref 'ClusterControlPlaneSecurityGroup'
      SourceSecurityGroupId: !Ref 'NodeSecurityGroup'
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  NodeSSHSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow ssh into worker node
      GroupId: !Ref 'NodeSecurityGroup'
      SourceSecurityGroupId: !Ref 'ProvidedSecurityGroup'
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      AmiType: !Ref 'AmiType'
      ClusterName: !Ref 'ClusterName'
      DiskSize: !Ref 'NodeDiskSize'
      InstanceTypes:
        - !Ref 'NodeInstanceType'
      NodegroupName: !Ref 'NodeGroupName'
      NodeRole: {"Fn::GetAtt" : ["NodeInstanceRole", "Arn"] }
      RemoteAccess:
        Ec2SshKey: !Ref 'KeyName'
        SourceSecurityGroups:
          - !Ref 'ProvidedSecurityGroup'
          - !Ref 'NodeSecurityGroup'
      ScalingConfig:
        MinSize: !Ref 'NodeGroupScalingConfigMinSize'
        DesiredSize: !Ref 'NodeGroupScalingConfigDesiredSize'
        MaxSize: !Ref 'NodeGroupScalingConfigMaxSize'
      Subnets: !Ref 'Subnets'
      Tags:
        Name: !Sub ${NodeGroupName}-NodeGroup
Outputs:
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt 'NodeInstanceRole.Arn'
  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref 'NodeSecurityGroup'