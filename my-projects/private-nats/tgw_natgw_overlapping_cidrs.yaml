# Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# https://aws.amazon.com/agreement
# SPDX-License-Identifier: MIT-0
# src:https://aws.amazon.com/blogs/networking-and-content-delivery/how-to-solve-private-ip-exhaustion-with-private-nat-solution/
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC A info
      Parameters:
      - pVPCACidr
      - pVPCAAdditionalCidr
    - Label:
        default: VPC B info
      Parameters:
      - pVPCBCidr
      - pVPCBAdditionalCidr
    - Label:
        default: VPC A Source Instance Info
      Parameters:
      - pVPCASourceInstanceIP
    - Label:
        default: VPC B Web Server Info
      Parameters:
      - pVPCBWebServerIP

Parameters:
  pVPCACidr:
    Type: String
    Default: 10.0.1.0/24
    Description: VPC A Routable CIDR
  pVPCBCidr:
    Type: String
    Default: 10.0.2.0/24
    Description: VPC B Routable CIDR
  pVPCAAdditionalCidr:
    Type: String
    Default: 100.64.0.0/16
    Description: VPC A non-routable CIDR
  pVPCBAdditionalCidr:
    Type: String
    Default: 100.64.0.0/16
    Description: VPC B non-routable CIDR
  pVPCASourceInstanceIP:
    Type: String
    Default: 100.64.0.10
    Description: VPC A Source Instance IP
  pVPCBWebServerIP:
    Type: String
    Default: 100.64.0.20
    Description: VPC B Web Server IP
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  rTGW:
    Type: AWS::EC2::TransitGateway
    Properties:
      AutoAcceptSharedAttachments: enable
      DefaultRouteTableAssociation: disable
      DefaultRouteTablePropagation: disable
      Tags:
        - Key: Name
          Value: TGW-OverlappingCIDR
  rVPCA:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVPCACidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: VPC-A

  rVPCAAdditionalCidr:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      CidrBlock: !Ref pVPCAAdditionalCidr
      VpcId: !Ref rVPCA

  rVPCANonRoutableSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: rVPCAAdditionalCidr
    Properties:
      CidrBlock:
        Fn::Select:
          - 0
          - Fn::Cidr:
              - !Ref pVPCAAdditionalCidr
              - 8
              - 8
      VpcId:
        Ref: rVPCA
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: VPCA-non-routable-Subnet-AZ1

  rVPCANonRoutableRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: rVPCA
      Tags:
        - Key: Name
          Value: VPCA-Non-Routable-RouteTable
  rVPCASubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rVPCANonRoutableRouteTable
      SubnetId:
        Ref: rVPCANonRoutableSubnet

  rVPCAAlbRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref pVPCBCidr
      NatGatewayId: !Ref rPrivateNATGW
      RouteTableId: !Ref rVPCANonRoutableRouteTable
  rVPCARoutableSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 0
          - Fn::Cidr:
              - !Ref pVPCACidr
              - 2
              - 7
      VpcId:
        Ref: rVPCA
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: VPCA-routable-Subnet-AZ1

  rVPCARoutableRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: rVPCA
      Tags:
        - Key: Name
          Value: VPCA-Routable-RouteTable
  rVPCARoutableSubnetRtbAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rVPCARoutableRouteTable
      SubnetId:
        Ref: rVPCARoutableSubnet


  rVPCATGWRoute:
    Type: AWS::EC2::Route
    DependsOn: rVPCATgwAttachment
    Properties:
      DestinationCidrBlock: !Ref pVPCBCidr
      TransitGatewayId: !Ref rTGW
      RouteTableId: !Ref rVPCARoutableRouteTable
  rVPCATgwAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - Ref: rVPCARoutableSubnet
      TransitGatewayId:
        Ref: rTGW
      VpcId:
        Ref: rVPCA
      Tags:
        - Key: Name
          Value: VPC-A-TGW-Attach
  rTGWRtb:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId:
        Ref: rTGW
      Tags:
        - Key: Name
          Value: TGW-RouteTable
  rVPCAtgwattachmentassociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId:
        Ref: rVPCATgwAttachment
      TransitGatewayRouteTableId:
        Ref: rTGWRtb
  rTgwRouteToVpcB:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      TransitGatewayRouteTableId:
        Ref: rTGWRtb
      DestinationCidrBlock: !Ref pVPCBCidr
      TransitGatewayAttachmentId:
        Ref: rVPCBTgwAttachment


  rVPCB:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVPCBCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: VPC-B
  rVPCBAdditionalCidr:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      CidrBlock: !Ref pVPCBAdditionalCidr
      VpcId: !Ref rVPCB

  rVPCBNonRoutableSubnetAZ1:
    Type: AWS::EC2::Subnet
    DependsOn: rVPCBAdditionalCidr
    Properties:
      CidrBlock:
        Fn::Select:
          - 0
          - Fn::Cidr:
              - !Ref pVPCBAdditionalCidr
              - 8
              - 8
      VpcId:
        Ref: rVPCB
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: VPCB-non-routable-Subnet-AZ1
  rVPCBNonRoutableSubnetAZ2:
    Type: AWS::EC2::Subnet
    DependsOn: rVPCBAdditionalCidr
    Properties:
      CidrBlock:
        Fn::Select:
          - 1
          - Fn::Cidr:
              - !Ref pVPCBAdditionalCidr
              - 8
              - 8
      VpcId:
        Ref: rVPCB
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: VPCB-non-routable-Subnet-AZ2
  rVPCBNonRoutableRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: rVPCB
      Tags:
        - Key: Name
          Value: VPCB-Non-Routable-RouteTable
  rVPCBNonRoutableSubnetAZ1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rVPCBNonRoutableRouteTable
      SubnetId:
        Ref: rVPCBNonRoutableSubnetAZ1
  rVPCBNonRoutableSubnetAZ2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rVPCBNonRoutableRouteTable
      SubnetId:
        Ref: rVPCBNonRoutableSubnetAZ2


  rVPCBRoutableSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 0
          - Fn::Cidr:
              - !Ref pVPCBCidr
              - 2
              - 7
      VpcId:
        Ref: rVPCB
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: VPCB-routable-Subnet-AZ1
  rVPCBRoutableSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::Select:
          - 1
          - Fn::Cidr:
              - !Ref pVPCBCidr
              - 2
              - 7
      VpcId:
        Ref: rVPCB
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: VPCB-routable-Subnet-AZ2
  rVPCBRoutableRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: rVPCB
      Tags:
        - Key: Name
          Value: VPCB-Routable-RouteTable

  rVPCBRoutableSubnetAZ1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rVPCBRoutableRouteTable
      SubnetId:
        Ref: rVPCBRoutableSubnetAZ1
  rVPCBRoutableSubnetAZ2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rVPCBRoutableRouteTable
      SubnetId:
        Ref: rVPCBRoutableSubnetAZ2
  rVPCBTGWRoute:
    Type: AWS::EC2::Route
    DependsOn: rVPCBTgwAttachment
    Properties:
      DestinationCidrBlock: !Ref pVPCACidr
      TransitGatewayId: !Ref rTGW
      RouteTableId: !Ref rVPCBRoutableRouteTable
  rVPCBTgwAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - Ref: rVPCBRoutableSubnetAZ1
        - Ref: rVPCBRoutableSubnetAZ2
      TransitGatewayId:
        Ref: rTGW
      VpcId:
        Ref: rVPCB
      Tags:
        - Key: Name
          Value: VPC-B-TGW-Attachment
  rVPCBtgwattachmentassociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId:
        Ref: rVPCBTgwAttachment
      TransitGatewayRouteTableId:
        Ref: rTGWRtb
  rTgwRouteToVpcA:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      TransitGatewayRouteTableId:
        Ref: rTGWRtb
      DestinationCidrBlock: !Ref pVPCACidr
      TransitGatewayAttachmentId:
        Ref: rVPCATgwAttachment
  rS3EndpointVPCB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref rVPCBNonRoutableRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref rVPCB

  rEC2SecurityGroup:                         # Security Group to associate with the EC2 instance in VPC-A
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: !Sub '${AWS::StackName}-EC2SecurityGroup'
        GroupName: !Sub '${AWS::StackName}-EC2SecurityGroup'
        VpcId: !Ref rVPCA
        # Despite this security group containing no ingress rules, Session
        # Manager can still provide shell access
        SecurityGroupEgress:
        # The SSM Agent connects to Session Manager over TCP 443
        - Description: allow outbound HTTPS to the VPC-A
          CidrIp: !Ref pVPCAAdditionalCidr
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - Description: allow outbound HTTP to everywhere
          CidrIp: !Ref pVPCBCidr
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp

  rAmazonLinuxInstance:                      # Source EC2 instance in VPC-A
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t2.nano
      IamInstanceProfile: !Ref rEC2InstanceProfile
      PrivateIpAddress: !Ref pVPCASourceInstanceIP
      SecurityGroupIds:
        - !Ref rEC2SecurityGroup
      SubnetId: !Ref rVPCANonRoutableSubnet
      Tags:
        - Key: Name
          Value: SourceInstance-VPC-A

  rSessionManagerVPCEndpointSG:              # Creating Security Group to associate with the Session Manager VPC Endpoint
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-Session Manager Interface Endpoint SecurityGroup'
      GroupName: !Sub ${AWS::StackName}-SessionManagerVPCEndpointSG
      VpcId: !Ref rVPCA
      SecurityGroupIngress:
      # The SSM Agent connects to Session Manager over TCP 443
      - Description: allow inbound HTTPS from the EC2 instance
        SourceSecurityGroupId: !Ref rEC2SecurityGroup
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      SecurityGroupEgress:
      # The SSM Agent connects to Session Manager over TCP 443
      - Description: allow outbound HTTPS to the VPC-A
        CidrIp: !Ref pVPCAAdditionalCidr
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp

  rSessionManagerVPCEndpointSSM:             # VPC endpoint  SSM
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - !Ref rVPCANonRoutableSubnet
      SecurityGroupIds:
        - !Ref rSessionManagerVPCEndpointSG
      VpcEndpointType: 'Interface'
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      PrivateDnsEnabled: true
      VpcId: !Ref rVPCA

  rSessionManagerVPCEndpointEC2Messages:     # VPC endpoint  EC2Messages
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - !Ref rVPCANonRoutableSubnet
      SecurityGroupIds:
        - !Ref rSessionManagerVPCEndpointSG
      VpcEndpointType: 'Interface'
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      PrivateDnsEnabled: true
      VpcId: !Ref rVPCA

  rSessionManagerVPCEndpointSSMMessages:     # VPC endpoint SSMMessages
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - !Ref rVPCANonRoutableSubnet
      SecurityGroupIds:
        - !Ref rSessionManagerVPCEndpointSG
      VpcEndpointType: 'Interface'
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      PrivateDnsEnabled: true
      VpcId: !Ref rVPCA

  rEC2InstanceProfile:                       # Instance profile for the Source EC2
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: /
        Roles:
          - !Ref rEC2InstanceRole

  rEC2InstanceRole:                          # IAM Role for the Source EC2
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        # The managed IAM policy AmazonSSMManagedInstanceCore grants access to Session Manager
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  rWebServerSecurityGroup:                   # EC2 Security Group Allowing Port 80 from ALB Security Group
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: Port 80 from ALB Security Group
          GroupName: !Sub '${AWS::StackName}-WebServerSecurityGroup'
          VpcId: !Ref rVPCB
          SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                SourceSecurityGroupId:
                    Ref: rALBSecurityGroup

  rALBSecurityGroup:                         # ALB Security Group allowing Port 80 from VPC-A routable CIDR range
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: Port 80 VPC-A routable CIDR range
          GroupName: !Sub '${AWS::StackName}-ALBSecurityGroup'
          VpcId: !Ref rVPCB
          SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: !Ref pVPCACidr

  rWebServer:                                # Linux Instance with Apache running on Port 80
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      Tags:
        - Key: Name
          Value: WebServer-VPC-B
      InstanceType: t2.nano
      InstanceInitiatedShutdownBehavior: stop
      Monitoring: true
      NetworkInterfaces:
      - AssociatePublicIpAddress: false
        PrivateIpAddress: !Ref pVPCBWebServerIP
        DeviceIndex: '0'
        GroupSet:
        - !Ref rWebServerSecurityGroup
        SubnetId: !Ref rVPCBNonRoutableSubnetAZ1
      Tenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cd /tmp
          yum update -y
          yum install -y httpd
          echo "Great! If you are seeing this message, you were able to reach the destination website with overlapping IP address from the SourceInstance-VPC-A" > /var/www/html/index.html
          service httpd start
          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource rWebServer \
            --region ${AWS::Region}

  rALBTargetGroup:                           # ALB Target Group
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: rALBTargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id:
          Ref: rWebServer
        Port: 80
      UnhealthyThresholdCount: 3
      VpcId: !Ref rVPCB
      Tags:
      - Key: Name
        Value: rALBTargetGroup
      - Key: Port
        Value: '80'

  rApplicationLoadBalancer:                  # Application Load Balancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: OverlappingCIDR-ALB
      Scheme: internal
      Subnets:
      - Ref: rVPCBRoutableSubnetAZ1
      - Ref: rVPCBRoutableSubnetAZ2
      SecurityGroups:
      - !Ref rALBSecurityGroup
      Tags:
        - Key: Name
          Value: OverlappingCIDR-ALB

  rALBListener:                              # ALB HTTP listener
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: rALBTargetGroup
      LoadBalancerArn:
          Ref: rApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  rPrivateNATGW:                             # Private NAT Gateway
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: private
      SubnetId: !Ref rVPCARoutableSubnet

Outputs:
    oALBHostName:
        Description: 'Application Load Balancer Hostname'
        Value: !GetAtt rApplicationLoadBalancer.DNSName
    oWebServer:
        Description: 'EC2 Instance'
        Value: !Ref rWebServer
    oALBTargetGroup:
        Description: 'EC2 Target Group'
        Value: !Ref rALBTargetGroup
    oApplicationLoadBalancer:
        Description: 'Application Load Balancer'
        Value: !Ref rApplicationLoadBalancer
    oNatGwId:
        Description: 'NAT GW'
        Value: !Ref rPrivateNATGW
